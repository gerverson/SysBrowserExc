package cypt.sys.browser.exc;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

public class Main extends javax.swing.JFrame {

    static String parametro = "";
    static String time = "";
    static String linecmd = "";

    public Main() {
        initComponents();
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);
        setIconImage(new ImageIcon(getClass().getResource("/sys/browser/exc/ico/Sysico.png")).getImage());

        new Thread(new Runnable() {
            @Override
            public void run() {

                ProcessBuilder processBuilder = new ProcessBuilder(new String[]{"cmd.exe", "/C", parametro});
                try {
                    Process process = processBuilder.start();
                    printResults(process, jTextArea1);
                } catch (IOException ex) {

                }
                try {
                    Thread.sleep(5000);
                    System.exit(0);
                } catch (InterruptedException ex) {

                }

            }

        }).start();

        new Thread(new Runnable() {
            @Override
            public void run() {

                int i = 0;

                Double t1 = Double.valueOf(time);
       
                Double t2 = (t1 * 1000) / 100;
         
                long t3 = Math.round(t2);
          
                try {
                    while (i <= 100) {
                        // fill the menu bar
                        jProgressBar1.setValue(i);

                        // delay the thread
                        Thread.sleep(t3);
                        i++;
                    }
                } catch (Exception e) {
                }
            }
        }).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sys Browser Exc");

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sys Browser Exc");

        jScrollPane1.setBackground(new java.awt.Color(0, 0, 0));

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(0, 204, 51));
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        for (int i = 0; i < args.length; i++) {
            parametro = parametro + " " + args[i];
        }

        if ("".equals(parametro)) {

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Settings().setVisible(true);
                }
            });

        } else if (parametro.contains("syscmd:")) {
            parametro = parametro.replace("syscmd:", "");

            time = parametro.substring(1, 5);

            parametro = parametro.substring(5, parametro.length());

            parametro = parametro.replace("*0*", "=");
            parametro = parametro.replace("*1*", "%");
            parametro = parametro.replace("*2*", "\\");
            parametro = parametro.replace("*3*", "/");
            parametro = parametro.replace("*4*", " ");
            parametro = parametro.replace("*5*", "-");
            parametro = parametro.replace("*6*", "'");
            parametro = parametro.replace("*7*", "\"");
            parametro = parametro.replace("*8*", ">");
            parametro = parametro.replace("*9*", "<");

            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new Main().setVisible(true);
                }
            });
        } else {
            JOptionPane.showMessageDialog(null, "Invalid Arguments!", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    public static void printResults(Process process, JTextArea label) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        String line = "";
        while ((line = reader.readLine()) != null) {
            linecmd = linecmd + "\n" + line;
            label.setText(linecmd);
//            System.out.println(line);
        }
    }

}
